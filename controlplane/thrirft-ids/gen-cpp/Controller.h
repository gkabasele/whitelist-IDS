/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Controller_H
#define Controller_H

#include <thrift/TDispatchProcessor.h>
#include "IDSController_types.h"

namespace IDSControllerCpp {

class ControllerIf {
 public:
  virtual ~ControllerIf() {}
  virtual void mirror(const Flow& req, const std::vector<int16_t> & switches) = 0;
  virtual void redirect(const Flow& req, const std::vector<int16_t> & switches) = 0;
  virtual void block(const Flow& req, const std::vector<int16_t> & switches) = 0;
  virtual void allow(const Flow& req, const std::vector<int16_t> & switches) = 0;
};

class ControllerIfFactory {
 public:
  typedef ControllerIf Handler;

  virtual ~ControllerIfFactory() {}

  virtual ControllerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ControllerIf* /* handler */) = 0;
};

class ControllerIfSingletonFactory : virtual public ControllerIfFactory {
 public:
  ControllerIfSingletonFactory(const boost::shared_ptr<ControllerIf>& iface) : iface_(iface) {}
  virtual ~ControllerIfSingletonFactory() {}

  virtual ControllerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ControllerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ControllerIf> iface_;
};

class ControllerNull : virtual public ControllerIf {
 public:
  virtual ~ControllerNull() {}
  void mirror(const Flow& /* req */, const std::vector<int16_t> & /* switches */) {
    return;
  }
  void redirect(const Flow& /* req */, const std::vector<int16_t> & /* switches */) {
    return;
  }
  void block(const Flow& /* req */, const std::vector<int16_t> & /* switches */) {
    return;
  }
  void allow(const Flow& /* req */, const std::vector<int16_t> & /* switches */) {
    return;
  }
};

typedef struct _Controller_mirror_args__isset {
  _Controller_mirror_args__isset() : req(false), switches(false) {}
  bool req :1;
  bool switches :1;
} _Controller_mirror_args__isset;

class Controller_mirror_args {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};

  Controller_mirror_args(const Controller_mirror_args&);
  Controller_mirror_args& operator=(const Controller_mirror_args&);
  Controller_mirror_args() {
  }

  virtual ~Controller_mirror_args() throw();
  Flow req;
  std::vector<int16_t>  switches;

  _Controller_mirror_args__isset __isset;

  void __set_req(const Flow& val);

  void __set_switches(const std::vector<int16_t> & val);

  bool operator == (const Controller_mirror_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(switches == rhs.switches))
      return false;
    return true;
  }
  bool operator != (const Controller_mirror_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_mirror_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_mirror_args& obj);
};


class Controller_mirror_pargs {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};


  virtual ~Controller_mirror_pargs() throw();
  const Flow* req;
  const std::vector<int16_t> * switches;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_mirror_pargs& obj);
};

typedef struct _Controller_mirror_result__isset {
  _Controller_mirror_result__isset() : error(false) {}
  bool error :1;
} _Controller_mirror_result__isset;

class Controller_mirror_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  Controller_mirror_result(const Controller_mirror_result&);
  Controller_mirror_result& operator=(const Controller_mirror_result&);
  Controller_mirror_result() {
  }

  virtual ~Controller_mirror_result() throw();
  IDSControllerException error;

  _Controller_mirror_result__isset __isset;

  void __set_error(const IDSControllerException& val);

  bool operator == (const Controller_mirror_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Controller_mirror_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_mirror_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_mirror_result& obj);
};

typedef struct _Controller_mirror_presult__isset {
  _Controller_mirror_presult__isset() : error(false) {}
  bool error :1;
} _Controller_mirror_presult__isset;

class Controller_mirror_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~Controller_mirror_presult() throw();
  IDSControllerException error;

  _Controller_mirror_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Controller_mirror_presult& obj);
};

typedef struct _Controller_redirect_args__isset {
  _Controller_redirect_args__isset() : req(false), switches(false) {}
  bool req :1;
  bool switches :1;
} _Controller_redirect_args__isset;

class Controller_redirect_args {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};

  Controller_redirect_args(const Controller_redirect_args&);
  Controller_redirect_args& operator=(const Controller_redirect_args&);
  Controller_redirect_args() {
  }

  virtual ~Controller_redirect_args() throw();
  Flow req;
  std::vector<int16_t>  switches;

  _Controller_redirect_args__isset __isset;

  void __set_req(const Flow& val);

  void __set_switches(const std::vector<int16_t> & val);

  bool operator == (const Controller_redirect_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(switches == rhs.switches))
      return false;
    return true;
  }
  bool operator != (const Controller_redirect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_redirect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_redirect_args& obj);
};


class Controller_redirect_pargs {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};


  virtual ~Controller_redirect_pargs() throw();
  const Flow* req;
  const std::vector<int16_t> * switches;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_redirect_pargs& obj);
};

typedef struct _Controller_redirect_result__isset {
  _Controller_redirect_result__isset() : error(false) {}
  bool error :1;
} _Controller_redirect_result__isset;

class Controller_redirect_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  Controller_redirect_result(const Controller_redirect_result&);
  Controller_redirect_result& operator=(const Controller_redirect_result&);
  Controller_redirect_result() {
  }

  virtual ~Controller_redirect_result() throw();
  IDSControllerException error;

  _Controller_redirect_result__isset __isset;

  void __set_error(const IDSControllerException& val);

  bool operator == (const Controller_redirect_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Controller_redirect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_redirect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_redirect_result& obj);
};

typedef struct _Controller_redirect_presult__isset {
  _Controller_redirect_presult__isset() : error(false) {}
  bool error :1;
} _Controller_redirect_presult__isset;

class Controller_redirect_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~Controller_redirect_presult() throw();
  IDSControllerException error;

  _Controller_redirect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Controller_redirect_presult& obj);
};

typedef struct _Controller_block_args__isset {
  _Controller_block_args__isset() : req(false), switches(false) {}
  bool req :1;
  bool switches :1;
} _Controller_block_args__isset;

class Controller_block_args {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};

  Controller_block_args(const Controller_block_args&);
  Controller_block_args& operator=(const Controller_block_args&);
  Controller_block_args() {
  }

  virtual ~Controller_block_args() throw();
  Flow req;
  std::vector<int16_t>  switches;

  _Controller_block_args__isset __isset;

  void __set_req(const Flow& val);

  void __set_switches(const std::vector<int16_t> & val);

  bool operator == (const Controller_block_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(switches == rhs.switches))
      return false;
    return true;
  }
  bool operator != (const Controller_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_block_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_block_args& obj);
};


class Controller_block_pargs {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};


  virtual ~Controller_block_pargs() throw();
  const Flow* req;
  const std::vector<int16_t> * switches;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_block_pargs& obj);
};

typedef struct _Controller_block_result__isset {
  _Controller_block_result__isset() : error(false) {}
  bool error :1;
} _Controller_block_result__isset;

class Controller_block_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  Controller_block_result(const Controller_block_result&);
  Controller_block_result& operator=(const Controller_block_result&);
  Controller_block_result() {
  }

  virtual ~Controller_block_result() throw();
  IDSControllerException error;

  _Controller_block_result__isset __isset;

  void __set_error(const IDSControllerException& val);

  bool operator == (const Controller_block_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Controller_block_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_block_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_block_result& obj);
};

typedef struct _Controller_block_presult__isset {
  _Controller_block_presult__isset() : error(false) {}
  bool error :1;
} _Controller_block_presult__isset;

class Controller_block_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~Controller_block_presult() throw();
  IDSControllerException error;

  _Controller_block_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Controller_block_presult& obj);
};

typedef struct _Controller_allow_args__isset {
  _Controller_allow_args__isset() : req(false), switches(false) {}
  bool req :1;
  bool switches :1;
} _Controller_allow_args__isset;

class Controller_allow_args {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};

  Controller_allow_args(const Controller_allow_args&);
  Controller_allow_args& operator=(const Controller_allow_args&);
  Controller_allow_args() {
  }

  virtual ~Controller_allow_args() throw();
  Flow req;
  std::vector<int16_t>  switches;

  _Controller_allow_args__isset __isset;

  void __set_req(const Flow& val);

  void __set_switches(const std::vector<int16_t> & val);

  bool operator == (const Controller_allow_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(switches == rhs.switches))
      return false;
    return true;
  }
  bool operator != (const Controller_allow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_allow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_allow_args& obj);
};


class Controller_allow_pargs {
 public:

  static const char* ascii_fingerprint; // = "2B8403668EC75BC5E4D140D3463BE87A";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x84,0x03,0x66,0x8E,0xC7,0x5B,0xC5,0xE4,0xD1,0x40,0xD3,0x46,0x3B,0xE8,0x7A};


  virtual ~Controller_allow_pargs() throw();
  const Flow* req;
  const std::vector<int16_t> * switches;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_allow_pargs& obj);
};

typedef struct _Controller_allow_result__isset {
  _Controller_allow_result__isset() : error(false) {}
  bool error :1;
} _Controller_allow_result__isset;

class Controller_allow_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  Controller_allow_result(const Controller_allow_result&);
  Controller_allow_result& operator=(const Controller_allow_result&);
  Controller_allow_result() {
  }

  virtual ~Controller_allow_result() throw();
  IDSControllerException error;

  _Controller_allow_result__isset __isset;

  void __set_error(const IDSControllerException& val);

  bool operator == (const Controller_allow_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Controller_allow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Controller_allow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Controller_allow_result& obj);
};

typedef struct _Controller_allow_presult__isset {
  _Controller_allow_presult__isset() : error(false) {}
  bool error :1;
} _Controller_allow_presult__isset;

class Controller_allow_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~Controller_allow_presult() throw();
  IDSControllerException error;

  _Controller_allow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Controller_allow_presult& obj);
};

class ControllerClient : virtual public ControllerIf {
 public:
  ControllerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ControllerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void mirror(const Flow& req, const std::vector<int16_t> & switches);
  void send_mirror(const Flow& req, const std::vector<int16_t> & switches);
  void recv_mirror();
  void redirect(const Flow& req, const std::vector<int16_t> & switches);
  void send_redirect(const Flow& req, const std::vector<int16_t> & switches);
  void recv_redirect();
  void block(const Flow& req, const std::vector<int16_t> & switches);
  void send_block(const Flow& req, const std::vector<int16_t> & switches);
  void recv_block();
  void allow(const Flow& req, const std::vector<int16_t> & switches);
  void send_allow(const Flow& req, const std::vector<int16_t> & switches);
  void recv_allow();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ControllerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ControllerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ControllerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_mirror(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redirect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_block(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ControllerProcessor(boost::shared_ptr<ControllerIf> iface) :
    iface_(iface) {
    processMap_["mirror"] = &ControllerProcessor::process_mirror;
    processMap_["redirect"] = &ControllerProcessor::process_redirect;
    processMap_["block"] = &ControllerProcessor::process_block;
    processMap_["allow"] = &ControllerProcessor::process_allow;
  }

  virtual ~ControllerProcessor() {}
};

class ControllerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ControllerProcessorFactory(const ::boost::shared_ptr< ControllerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ControllerIfFactory > handlerFactory_;
};

class ControllerMultiface : virtual public ControllerIf {
 public:
  ControllerMultiface(std::vector<boost::shared_ptr<ControllerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ControllerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ControllerIf> > ifaces_;
  ControllerMultiface() {}
  void add(boost::shared_ptr<ControllerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void mirror(const Flow& req, const std::vector<int16_t> & switches) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirror(req, switches);
    }
    ifaces_[i]->mirror(req, switches);
  }

  void redirect(const Flow& req, const std::vector<int16_t> & switches) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redirect(req, switches);
    }
    ifaces_[i]->redirect(req, switches);
  }

  void block(const Flow& req, const std::vector<int16_t> & switches) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->block(req, switches);
    }
    ifaces_[i]->block(req, switches);
  }

  void allow(const Flow& req, const std::vector<int16_t> & switches) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allow(req, switches);
    }
    ifaces_[i]->allow(req, switches);
  }

};

} // namespace

#endif
