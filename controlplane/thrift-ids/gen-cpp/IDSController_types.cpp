/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "IDSController_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace IDSControllerCpp {


IDSControllerException::~IDSControllerException() throw() {
}


void IDSControllerException::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void IDSControllerException::__set_error_description(const std::string& val) {
  this->error_description = val;
}

const char* IDSControllerException::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t IDSControllerException::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t IDSControllerException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_description);
          this->__isset.error_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IDSControllerException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IDSControllerException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IDSControllerException &a, IDSControllerException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_description, b.error_description);
  swap(a.__isset, b.__isset);
}

IDSControllerException::IDSControllerException(const IDSControllerException& other0) : TException() {
  error_code = other0.error_code;
  error_description = other0.error_description;
  __isset = other0.__isset;
}
IDSControllerException& IDSControllerException::operator=(const IDSControllerException& other1) {
  error_code = other1.error_code;
  error_description = other1.error_description;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IDSControllerException& obj) {
  using apache::thrift::to_string;
  out << "IDSControllerException(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_description=" << to_string(obj.error_description);
  out << ")";
  return out;
}


Flow::~Flow() throw() {
}


void Flow::__set_srcip(const std::string& val) {
  this->srcip = val;
}

void Flow::__set_dstip(const std::string& val) {
  this->dstip = val;
}

void Flow::__set_srcport(const int16_t val) {
  this->srcport = val;
}

void Flow::__set_dstport(const int16_t val) {
  this->dstport = val;
}

void Flow::__set_proto(const int8_t val) {
  this->proto = val;
}

void Flow::__set_funcode(const int8_t val) {
  this->funcode = val;
__isset.funcode = true;
}

void Flow::__set_length(const int16_t val) {
  this->length = val;
__isset.length = true;
}

const char* Flow::ascii_fingerprint = "665054788FFD5C477ADDCB3717F4E112";
const uint8_t Flow::binary_fingerprint[16] = {0x66,0x50,0x54,0x78,0x8F,0xFD,0x5C,0x47,0x7A,0xDD,0xCB,0x37,0x17,0xF4,0xE1,0x12};

uint32_t Flow::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_srcip = false;
  bool isset_dstip = false;
  bool isset_srcport = false;
  bool isset_dstport = false;
  bool isset_proto = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcip);
          isset_srcip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dstip);
          isset_dstip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->srcport);
          isset_srcport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dstport);
          isset_dstport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->proto);
          isset_proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->funcode);
          this->__isset.funcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_srcip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dstip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_srcport)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dstport)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_proto)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Flow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Flow");

  xfer += oprot->writeFieldBegin("srcip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->srcip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dstip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dstip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("srcport", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->srcport);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dstport", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->dstport);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->proto);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.funcode) {
    xfer += oprot->writeFieldBegin("funcode", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->funcode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.length) {
    xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->length);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Flow &a, Flow &b) {
  using ::std::swap;
  swap(a.srcip, b.srcip);
  swap(a.dstip, b.dstip);
  swap(a.srcport, b.srcport);
  swap(a.dstport, b.dstport);
  swap(a.proto, b.proto);
  swap(a.funcode, b.funcode);
  swap(a.length, b.length);
  swap(a.__isset, b.__isset);
}

Flow::Flow(const Flow& other2) {
  srcip = other2.srcip;
  dstip = other2.dstip;
  srcport = other2.srcport;
  dstport = other2.dstport;
  proto = other2.proto;
  funcode = other2.funcode;
  length = other2.length;
  __isset = other2.__isset;
}
Flow& Flow::operator=(const Flow& other3) {
  srcip = other3.srcip;
  dstip = other3.dstip;
  srcport = other3.srcport;
  dstport = other3.dstport;
  proto = other3.proto;
  funcode = other3.funcode;
  length = other3.length;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Flow& obj) {
  using apache::thrift::to_string;
  out << "Flow(";
  out << "srcip=" << to_string(obj.srcip);
  out << ", " << "dstip=" << to_string(obj.dstip);
  out << ", " << "srcport=" << to_string(obj.srcport);
  out << ", " << "dstport=" << to_string(obj.dstport);
  out << ", " << "proto=" << to_string(obj.proto);
  out << ", " << "funcode="; (obj.__isset.funcode ? (out << to_string(obj.funcode)) : (out << "<null>"));
  out << ", " << "length="; (obj.__isset.length ? (out << to_string(obj.length)) : (out << "<null>"));
  out << ")";
  return out;
}

} // namespace
