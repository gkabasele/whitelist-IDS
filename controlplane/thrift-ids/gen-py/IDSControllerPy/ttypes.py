#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class IDSControllerException(TException):
  """
  Attributes:
   - error_code
   - error_description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_description', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_description=None,):
    self.error_code = error_code
    self.error_description = error_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IDSControllerException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_description is not None:
      oprot.writeFieldBegin('error_description', TType.STRING, 2)
      oprot.writeString(self.error_description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.error_description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Flow:
  """
  Attributes:
   - srcip
   - dstip
   - srcport
   - dstport
   - proto
   - funcode
   - length
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'srcip', None, None, ), # 1
    (2, TType.STRING, 'dstip', None, None, ), # 2
    (3, TType.I16, 'srcport', None, None, ), # 3
    (4, TType.I16, 'dstport', None, None, ), # 4
    (5, TType.BYTE, 'proto', None, None, ), # 5
    None, # 6
    (7, TType.BYTE, 'funcode', None, None, ), # 7
    (8, TType.I16, 'length', None, None, ), # 8
  )

  def __init__(self, srcip=None, dstip=None, srcport=None, dstport=None, proto=None, funcode=None, length=None,):
    self.srcip = srcip
    self.dstip = dstip
    self.srcport = srcport
    self.dstport = dstport
    self.proto = proto
    self.funcode = funcode
    self.length = length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.srcip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dstip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.srcport = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.dstport = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.proto = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.funcode = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.length = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Flow')
    if self.srcip is not None:
      oprot.writeFieldBegin('srcip', TType.STRING, 1)
      oprot.writeString(self.srcip)
      oprot.writeFieldEnd()
    if self.dstip is not None:
      oprot.writeFieldBegin('dstip', TType.STRING, 2)
      oprot.writeString(self.dstip)
      oprot.writeFieldEnd()
    if self.srcport is not None:
      oprot.writeFieldBegin('srcport', TType.I16, 3)
      oprot.writeI16(self.srcport)
      oprot.writeFieldEnd()
    if self.dstport is not None:
      oprot.writeFieldBegin('dstport', TType.I16, 4)
      oprot.writeI16(self.dstport)
      oprot.writeFieldEnd()
    if self.proto is not None:
      oprot.writeFieldBegin('proto', TType.BYTE, 5)
      oprot.writeByte(self.proto)
      oprot.writeFieldEnd()
    if self.funcode is not None:
      oprot.writeFieldBegin('funcode', TType.BYTE, 7)
      oprot.writeByte(self.funcode)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I16, 8)
      oprot.writeI16(self.length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.srcip is None:
      raise TProtocol.TProtocolException(message='Required field srcip is unset!')
    if self.dstip is None:
      raise TProtocol.TProtocolException(message='Required field dstip is unset!')
    if self.srcport is None:
      raise TProtocol.TProtocolException(message='Required field srcport is unset!')
    if self.dstport is None:
      raise TProtocol.TProtocolException(message='Required field dstport is unset!')
    if self.proto is None:
      raise TProtocol.TProtocolException(message='Required field proto is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.srcip)
    value = (value * 31) ^ hash(self.dstip)
    value = (value * 31) ^ hash(self.srcport)
    value = (value * 31) ^ hash(self.dstport)
    value = (value * 31) ^ hash(self.proto)
    value = (value * 31) ^ hash(self.funcode)
    value = (value * 31) ^ hash(self.length)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
